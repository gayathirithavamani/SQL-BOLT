ANSWERS OF ALL THE EXCERCISE IN SQLBOLT

TASK 1
SELECT title FROM movies;
SELECT director FROM movies;
SELECT title,director FROM movies;
SELECT title,year FROM movies;
SELECT * FROM movies;

TASK 2
SELECT * FROM movies
where id =6
;
SELECT * FROM movies
where year between 2000 and 2010
;
SELECT * FROM movies
where year not between 2000 and 2010
;

SELECT * FROM movies
where id between 1 and 5
;

TASK 3
SELECT * FROM movies
where title like "toy%"
;
SELECT * FROM movies
where director like "john%"
;
SELECT * FROM movies
where director not like "john%"
;
SELECT * FROM movies
where title like "wall-_"
;

TASK 4
SELECT distinct director from movies 
order by director
;
SELECT * from movies 
order by year Desc
limit 4
;
SELECT * from movies 
order by title
limit 5
;
SELECT * from movies 
order by title
limit 5 offset 5
;

TASK 5
SELECT * FROM north_american_cities
where country like "canada"
;
SELECT * FROM north_american_cities
where country like "united states"
order by latitude desc
;
SELECT * FROM north_american_cities
where longitude < -87.629798
order by longitude desc

;
SELECT * FROM north_american_cities
where country like "Mexico"
order by population desc
limit 2
;
SELECT * FROM north_american_cities
where country like "united states"
order by population desc
limit 2 offset 2
;

TASK 6
SELECT * FROM movies
inner join boxoffice
on id = movie_id
;
SELECT * FROM movies
inner join boxoffice
on id = movie_id
where international_sales > domestic_sales
;
SELECT * FROM movies
inner join boxoffice
on id = movie_id
order by rating desc
;

TASK7
SELECT distinct building FROM employees;
SELECT * FROM buildings
;
SELECT distinct building_name,role FROM buildings  
left join employees 
on building_name = building
;

TASK8
SELECT * FROM employees
where building is null
;
SELECT building_name FROM buildings
left join employees 
on building_name = building
where building is null
;

TASK9
SELECT *,(domestic_sales + international_sales)/1000000 as millions FROM movies
inner join boxoffice
on id = movie_id
;
SELECT title,rating*10 as rating FROM movies
inner join boxoffice
on id = movie_id
;
SELECT * FROM movies
inner join boxoffice
on id = movie_id
where year % 2 =0
;

TASK10
SELECT *,Max(years_employed) FROM employees;
SELECT *,avg(years_employed) FROM employees
group by role
;
SELECT *,total(years_employed) FROM employees
group by building
;

TASK11
SELECT *,count(role) FROM employees
where role ="Artist"
;
SELECT *,count(role) FROM employees
group by role
;
SELECT *,total(years_employed) FROM employees
group by role
having role ="Engineer"
;

TASK12
SELECT director,count(title) FROM movies
group by director
;
SELECT *,total(domestic_sales + international_sales) as total FROM movies
inner join boxoffice
on id = movie_id
group by director
;

TASK13
insert into movies 
values(4,"Toy Story 4","john lasseter",2021,95);
insert into boxoffice
values(4,8.7,340000000,270000000)
;

TASK14
update movies 
set director = "John Lasseter"
where id = 2
;
update movies 
set year= 1999
where title = "Toy Story 2"
;
update movies 
set title ="Toy Story 3",
director = "Lee Unkrich"
where title ="Toy Story 8"
;

TASK15
Delete FROM movies
where year < 2005
;
Delete FROM movies
where director = "Andrew Stanton"
;

TASK16
Create table Database(
Name text ,
Version float,
Download_count integer,);

TASK17
Alter table movies 
add Aspect_ratio float integer
;
alter table movies 
add Language text
default English
;

TASK18
drop table movies;
drop table if exists boxoffice;